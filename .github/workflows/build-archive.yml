name: Build & Deploy SceneStealer Archive

on:
  push:
    paths:
      - "samples/**"
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-archive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Make scripts executable
        run: chmod +x scripts/*.py

      - name: Generate Archive Index
        run: |
          python scripts/generate_archive.py samples/ web/archive.html

      - name: Update Main Index
        run: |
          python scripts/update_index.py samples/ web/index.html

      - name: Generate RSS Feed
        run: |
          python scripts/generate_rss.py samples/ web/rss.xml "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Generate Sitemap
        run: |
          python scripts/generate_sitemap.py samples/ web/sitemap.xml "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Copy Assets
        run: |
          # Copy favicon and other assets
          cp apps/web/manifest.webmanifest web/ 2>/dev/null || true
          # Ensure all necessary files are in web/
          ls -la web/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./web
          force_orphan: true

      - name: Create Success Notification
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Count samples
            let sampleCount = 0;
            try {
              const files = fs.readdirSync('samples/');
              sampleCount = files.filter(f => f.endsWith('.html')).length;
            } catch (e) {
              sampleCount = 0;
            }
            
            // Get latest sample
            let latestSample = 'Unknown';
            try {
              const files = fs.readdirSync('samples/');
              const htmlFiles = files.filter(f => f.endsWith('.html'));
              if (htmlFiles.length > 0) {
                latestSample = htmlFiles[htmlFiles.length - 1];
              }
            } catch (e) {
              // ignore
            }
            
            const deployUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}`;
            
            const issueBody = `üé≠ **SceneStealer Archive Updated!**
            
            ‚úÖ Archive successfully deployed to GitHub Pages
            üìä **Stats:**
            - Total samples: ${sampleCount}
            - Latest sample: ${latestSample}
            - Deploy time: ${new Date().toISOString()}
            
            üîó **Links:**
            - üåê [View Archive](${deployUrl}/archive.html)
            - üé® [Open Editor](${deployUrl}/editor/)
            - üè† [Main Site](${deployUrl})
            - üì° [RSS Feed](${deployUrl}/rss.xml)
            
            Generated by GitHub Actions workflow run #${{ github.run_number }}`;
            
            // Look for existing notification issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['auto-archive'],
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });
            } else {
              // Create new notification issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üìÅ Archive Deploy Notifications`,
                body: `This issue tracks automatic archive deployment notifications.\n\n---\n\n${issueBody}`,
                labels: ['auto-archive', 'notification']
              });
            }

      - name: Create Failure Notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `‚ùå **SceneStealer Archive Build Failed**
            
            The archive build process failed during workflow run #${{ github.run_number }}.
            
            üîç **Check the following:**
            - Sample HTML files are valid
            - Python scripts are working correctly
            - GitHub Pages deployment settings
            
            üîó [View Failed Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            Please review and fix the issues, then push a new commit to retry.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Archive Build Failed - Run #${{ github.run_number }}`,
              body: issueBody,
              labels: ['bug', 'auto-archive', 'build-failure']
            });